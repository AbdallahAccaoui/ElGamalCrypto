/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package elgamal;
//package cryptix.jce.provider.elgamal;
import java.math.BigInteger;
import java.security.SecureRandom;
import cryptix.jce.provider.elgamal.*;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author HP
 */
public class ElGamalForm extends javax.swing.JFrame {

    BigInteger p;
    BigInteger g;
    BigInteger b;
    BigInteger a;
    
    public ElGamalForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        primeEditText = new javax.swing.JTextField();
        primeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        PrimeShow = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        GeneratorAlphaaShow = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        bBetaPane = new javax.swing.JTextPane();
        MessageEditText = new javax.swing.JTextField();
        MessageButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        EncryptedTextArea = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        DecryptedTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        primeEditText.setText("Enter an approximation for prime number");

        primeButton.setText("prime");
        primeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primeButtonActionPerformed(evt);
            }
        });

        PrimeShow.setEditable(false);
        jScrollPane1.setViewportView(PrimeShow);

        GeneratorAlphaaShow.setEditable(false);
        jScrollPane2.setViewportView(GeneratorAlphaaShow);

        bBetaPane.setEditable(false);
        jScrollPane3.setViewportView(bBetaPane);

        MessageEditText.setText("Enter a message");

        MessageButton.setText("Send Message");
        MessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MessageButtonActionPerformed(evt);
            }
        });

        EncryptedTextArea.setEditable(false);
        EncryptedTextArea.setColumns(20);
        EncryptedTextArea.setRows(5);
        jScrollPane4.setViewportView(EncryptedTextArea);

        DecryptedTextArea.setColumns(20);
        DecryptedTextArea.setRows(5);
        jScrollPane5.setViewportView(DecryptedTextArea);

        jLabel1.setText("Decrypted Message");

        jLabel2.setText("Encrypted Message [r,s]");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(primeEditText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(primeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MessageEditText, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MessageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
                    .addComponent(jScrollPane5)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(primeEditText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(primeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MessageEditText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MessageButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void primeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primeButtonActionPerformed
       
        
        try{
           // Get user input for p. (pa)
        p = getNextPrime(this.primeEditText.getText());
       }catch(Exception e){
           JOptionPane.showMessageDialog(this,"Wrong","ERROR",JOptionPane.ERROR_MESSAGE);
           return;
       }
        Random r=new Random();
        // Calculate a generator. (alpha a)
	g = getGenerator(p, r);
        b = BigInteger.valueOf(123);
        a =  BigInteger.valueOf(123);
		// We found a generator, so let's do the rest of it.
		if (g != null) {
		// Pick a secret a (da)
		 a = new BigInteger(p.bitCount()-1, r);
		// Calculate the corresponding public b. (beta)
		 b = g.modPow(a, p);
		// Print out our public keys.
		this.PrimeShow.setText("Prime "+ p.toString());
                this.GeneratorAlphaaShow.setText("Alpha "+g.toString());
                this.bBetaPane.setText("Beta "+ b.toString());
			       }
                
        
       
        
    }//GEN-LAST:event_primeButtonActionPerformed

    private void MessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MessageButtonActionPerformed
        ElGamalAlgorithm d=new ElGamalAlgorithm();
        String msg=this.MessageEditText.getText().trim();
        int []Message=new int[msg.length()];  
        BigInteger []MessageBigInt= new BigInteger[msg.length()];
        BigInteger []encryptMessage;
        BigInteger decryptMessage;
        String decryptHelper;
        int ascii;
        char decrypted;
        for(int i=0; i<=msg.length()-1;i++){
            Message[i]=(char) msg.charAt(i);      
            MessageBigInt[i]=new BigInteger(Message[i]+"");
            encryptMessage=d.encrypt(MessageBigInt[i], p, g, b);
            this.EncryptedTextArea.append(Arrays.toString(encryptMessage));
            decryptMessage=d.decrypt(encryptMessage, p, a);
            decryptHelper=decryptMessage.toString();
            ascii=Integer.parseInt(decryptHelper);
            decrypted=(char)ascii;
            this.DecryptedTextArea.append(decrypted+"");
        }
        
        
        
    }//GEN-LAST:event_MessageButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ElGamalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ElGamalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ElGamalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ElGamalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ElGamalForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea DecryptedTextArea;
    private javax.swing.JTextArea EncryptedTextArea;
    private javax.swing.JTextPane GeneratorAlphaaShow;
    private javax.swing.JButton MessageButton;
    private javax.swing.JTextField MessageEditText;
    private javax.swing.JTextPane PrimeShow;
    private javax.swing.JTextPane bBetaPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton primeButton;
    private javax.swing.JTextField primeEditText;
    // End of variables declaration//GEN-END:variables

    // Incrementally tries each BigInteger starting at the value passed
		// in as a parameter until one of them is tests as being prime.
     public static BigInteger getNextPrime(String ans) {
			
	BigInteger one = new BigInteger("1");
	BigInteger test = new BigInteger(ans);
	while (!test.isProbablePrime(99))
		test = test.add(one);
	return test;		
    }
     
     // Precondition - p is prime and it's reasonably small, say, no more than 
     //				  5,000,000. If it's larger, this method will be quite
     //                           time-consuming.
     // Postcondition - if a generator for p can be found, then it is returned
     //                 if no generator is found after 1000 tries, null is 
     //                 returned.
		public static BigInteger getGenerator(BigInteger p, Random r) {

			int numtries = 0;
			
			// Try finding a generator at random 100 times.
			while (numtries < 1000) {
			
	    		// Here's what we're trying as the generator this time.
	    		BigInteger rand = new BigInteger(p.bitCount()-1,r);

	    		BigInteger exp = BigInteger.ONE;
	    		BigInteger next = rand.mod(p);

				// We exponentiate our generator until we get 1 mod p.
	    		while (!next.equals(BigInteger.ONE)) {
	      			next = (next.multiply(rand)).mod(p);
	      			exp = exp.add(BigInteger.ONE);
	    		}

				// If the first time we hit 1 is the exponent p-1, then we have
				// a generator.
	    		if (exp.equals(p.subtract(BigInteger.ONE)))
	      			return rand;
	      	}
	      	
	      	// None of the 1000 values we tried was a generator.
	      	return null;
		}
}
class ElGamalAlgorithm {
	public ElGamalAlgorithm(){}
	protected static BigInteger generateK(BigInteger p) {
        BigInteger k;
        
        BigInteger ONE = BigInteger.valueOf(1L);
        BigInteger p_1 = p.subtract(ONE);
        SecureRandom sr = new SecureRandom();
        do {
            k = new BigInteger(p.bitLength(), sr);
        } while (k.compareTo(ONE) <= 0 || k.compareTo(p_1) >= 0);
        return k;
    }

    /**
     * A method that do the encryption using the ElGamal algorithm.
     *
     * The ciphertext is returned as an array of two BigIntegers.
     *
     * @param m the plaintext
     * @param p the modulus
     * @param g the base
     * @param y the public key
     */
    public  BigInteger [] encrypt(BigInteger m, BigInteger p, 
                                        BigInteger g, BigInteger y) {
        BigInteger k = generateK(p);

        try {
            BigInteger [] bia = new BigInteger[2];
            bia[0] = g.modPow(k, p);
            bia[1] = y.modPow(k, p).multiply(m).mod(p);
            return bia;
        } catch (ArithmeticException e) {
            throw new RuntimeException("PANIC: Should not happend!!");
        }
    }
    
    /**
     * A method that do the decryption using the ElGamal algorithm.
     *
     * The plaintext is returned as a BigInteger.
     *
     * @param bia a BigInteger array containing the ciphertext
     * @param p the modulus
     * @param x the private key
     */
    public  BigInteger decrypt(BigInteger [] bia, BigInteger p,
                                     BigInteger x) 
        throws ArithmeticException
    {
        return (bia[0].modPow(x, p).modInverse(p)).multiply(bia[1]).mod(p);
    }

}

